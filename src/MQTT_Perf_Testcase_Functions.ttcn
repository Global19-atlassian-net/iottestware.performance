/*******************************************************************************
* Copyright (c) 2019 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Alexander Kaiser
*   Sascha Kretzschmann
*   Ilie Daniel Gheorghe Pop
*******************************************************************************/
module MQTT_Perf_Testcase_Functions {


import from MQTT_TestSystem all;
import from MQTT_TypesAndValues all;
import from MQTT_Functions all;
import from MQTT_Templates all;
import from MQTT_Pixits all;

// MQTT TS Framework
import from MQTTasp_Types all;
import from MQTT_TestSystem_Common all;
import from MQTT_Functions_Network all;
import from MQTT_Functions_Protocol all;
import from MQTT_Client_Behaviors all;
import from MQTT_Templates_MQTTasp all;
import from MQTT_Templates_CONNECT all;
import from MQTT_Templates_CONNACK all;
import from MQTT_Templates_PUBLISH all;
import from MQTT_Templates_PUBACK all;
import from MQTT_Templates_PUBREC all;
import from MQTT_Templates_SUBSCRIBE all;
import from MQTT_Templates_SUBACK all;
import from MQTT_Templates_UNSUBSCRIBE all;
import from MQTT_Templates_UNSUBACK all;


import from Random_Helper all;
import from UTF8_Helper all;

import from MQTT_v3_1_1_Types all;


group pingrespFunctionsGroup
{
  function f_TC_MQTT_PERF_BROKER_PINGRESP_001() runs on MQTT_Client
  {
    f_connectMqtt();
	var float ping_duration:=0.0;
    timer t_ping_timer:=10.0;
    var MQTT_v3_1_1_Message v_pingReq := valueof(t_ping_req('0000'B));
    f_send(v_pingReq);
	t_ping_timer.start;
    var template IPL4_Response v_expected := { receivedMsg := tw_ping_resp('0000'B) };
    var IPL4_Response v_response := f_receive();
	ping_duration:=t_ping_timer.read;
    if(match(v_response, v_expected))
   	{
   	 if(ping_duration*1000.0<1.0)
       {
        	setverdict(pass, "IUT answered correctly to PINGREQ with PINGRESP and duration " ,ping_duration*1000.0, "ms");
       }
       else
       {
       		setverdict(fail, "IUT answered correctly to PINGREQ with PINGRESP and duration " ,ping_duration*1000.0, "ms");
       }
     }
    else
    {
        setverdict(fail, "IUT answered incorrectly with ", v_response);
    }

    f_disconnectMqtt();
  }
  function f_TC_MQTT_PERF_BROKER_PINGRESP_002() runs on MQTT_Client return float
  {
    
	var float ping_duration:=0.0;
    timer t_ping_timer:=10.0;
    var MQTT_v3_1_1_Message v_pingReq := valueof(t_ping_req('0000'B));
    f_send(v_pingReq);
	t_ping_timer.start;
    var template IPL4_Response v_expected := { receivedMsg := tw_ping_resp('0000'B) };
    var IPL4_Response v_response := f_receive();
	ping_duration:=t_ping_timer.read;
    if(match(v_response, v_expected))
   	{
   	 if(ping_duration*1000.0<PX_MAX_RESPONSE_TIME)
       {
    //    	setverdict(pass, "IUT answered correctly to PINGREQ with PINGRESP and duration " ,ping_duration*1000.0, "ms");
       log("ping sent within limit");
       
       }
       else
       {
    //   		setverdict(fail, "IUT answered correctly to PINGREQ with PINGRESP and duration " ,ping_duration*1000.0, "ms");
       log("ping limit brech");
       }
     }
    else
    {
    //    setverdict(fail, "IUT answered incorrectly with ", v_response);
    log("ping reply incorrect");
    }
    return (ping_duration* 1000.0);
  }
  
} // pingrespFunctionsGroup

group disconnectFunctionsGroup
{
  function f_TC_MQTT_PERF_BROKER_DISCONNECT_001() runs on MQTT_Client
  {
    f_connectMqtt();

    var MQTT_v3_1_1_Message v_disconnect := valueof(t_disconnect('0000'B));
    f_send(v_disconnect);

    if(f_receiveNetworkClosedEvent())
    {
      setverdict(pass, "IUT closed the Network Connection correctly");
    }
    else
    {
      // Note: this case should/will never occure!
      setverdict(fail, "IUT MUST close the Network Connection");
      f_disconnectMqtt();
    }
  }

  function f_TC_MQTT_PERF_BROKER_DISCONNECT_002() runs on MQTT_Client
  {
    f_connectMqtt();

    var MQTT_v3_1_1_Message v_disconnect := valueof(t_disconnect('1111'B));
    f_send(v_disconnect);

    if(f_receiveNetworkClosedEvent())
    {
      setverdict(pass, "IUT closed the Network Connection correctly");
    }
    else
    {
      // Note: this case should/will never occure!
      setverdict(fail, "IUT MUST close the Network Connection");
      f_disconnectMqtt();
    }
  }
} // disconnectFunctionsGroup

group protocolFeaturesFunctionsGroup
{
  function f_TC_MQTT_PERF_BROKER_FEAT_REMLEN(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber, float p_timeout, octetstring p_payload) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    // subscribe to topic
    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done

    // publish a message
    var BIT1n v_retain_flag := '0'B
    var QoS v_qos_level := AT_MOST_ONCE_DELIVERY
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), p_payload))

    // receive the published message without retained flag
    // assumption: if payload is the same, decoding and encoding of remaining length was OK
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_payload_qos0(p_payload)
    p_subscriber.start(f_mqtt_receive_large_publish(v_expected, p_timeout, lengthof(p_payload)))

    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_KEEPALIVE_001() runs on MQTT_Client_MTC
  {
    var integer v_keep_alive := 2
    // spec says 1.5 times of keep_alive until IUT must close IPL4 connection, so we expect IPL4 close in 3.0 sec. + 1.0 sec. buffer
    var float v_timeout := 4.0
    f_mqtt_connect_02(v_keep_alive)

    f_mqtt_receive_ipl4_close(v_timeout)
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_001() runs on MQTT_Client
  {
    var UTF8EncodedString v_topic := f_getConcatenatedTopicName("retain");
    var octetstring v_payload := 'A0A0'O;

    f_connectMqtt();

    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publishHeader(-, AT_MOST_ONCE_DELIVERY, '1'B))
    var MQTT_v3_1_1_Message v_pub_send := valueof(t_publish_qos0(v_pub_header, v_topic.stringItem, v_payload))
    f_send(v_pub_send)

    var template MQTT_v3_1_1_Message v_expected := tw_publish_receive_qos0(tw_publishHeader_retained, v_topic.stringItem, v_payload)

    var boolean v_subscribed := f_subscribe(v_topic.stringItem, AT_MOST_ONCE_DELIVERY)

    if(v_subscribed)
    {
      var IPL4_Response v_response := f_receive();

      if(ischosen(v_response.receivedMsg))
      {
        if(match(v_response.receivedMsg.msg.publish.header, v_expected.msg.publish.header))
        {
          if(match(v_response.receivedMsg.msg.publish.topic_name, v_expected.msg.publish.topic_name))
          {
            if(match(v_response.receivedMsg.msg.publish.payload, v_expected.msg.publish.payload))
            {
              setverdict(pass, "Received retained message")
            }
            else
            {
              setverdict(fail, "PUBLISH payload does not match")
            }
          }
          else
          {
            setverdict(fail, "PUBLISH topic does not match")
          }
        }
        else
        {
          setverdict(fail, "PUBLISH header does not match")
        }
      }
      else
      {
        setverdict(fail, "Received not PUBLISH but: ", v_response)
      }
    }
    else
    {
      setverdict(fail, "Failed to subscribe")
    }

    f_disconnectMqtt();
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_002(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    // publish retained message
    var BIT1n v_retain_flag := '1'B
    var QoS v_qos_level := AT_LEAST_ONCE_DELIVERY
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header)))
    p_publisher.done;

    // subscribe and check if retained message received
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_retain_qos0('1'B)
    p_subscriber.start(f_mqtt_subscribe_retained(AT_MOST_ONCE_DELIVERY, v_expected))
    p_subscriber.done

    /* clean up the retained message as this might brake other tests! */
    p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    p_publisher.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_003(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    // subscribe to topic
    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done

    // publish retained message
    var BIT1n v_retain_flag := '1'B
    var QoS v_qos_level := AT_LEAST_ONCE_DELIVERY
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header)))
    p_publisher.done;

    // receive the published message without retained flag
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_retain_qos0('0'B)
    p_subscriber.start(f_mqtt_receive_publish(v_expected))
    p_subscriber.done

    /* clean up the retained message as this might brake other tests! */
    p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    p_publisher.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_004(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done

    /* Expected behaviour */
    // publish retained message with zero byte payload
    var BIT1n v_retain_flag := '1'B
    var QoS v_qos_level := AT_MOST_ONCE_DELIVERY
    var octetstring v_zero_byte_payload := ''O
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), v_zero_byte_payload))
    p_publisher.done;

    // receive the published message without retained flag and zero byte payload
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_zero_payload_qos0('0'B)
    p_subscriber.start(f_mqtt_receive_publish(v_expected))
    p_subscriber.done

    // Not required here because publisher already sends a retained message with zero-byte payload
    /* clean up the retained message as this might brake other tests! */
    //p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    //p_publisher.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_005(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    /* Expected behaviour */
    // send a retained message with payload
    var BIT1n v_retain_flag := '1'B
    var QoS v_qos_level := AT_MOST_ONCE_DELIVERY
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header)))
    p_publisher.done;

    // now send a retained message with zero byte payload -> delete retained message
    var octetstring v_zero_byte_payload := ''O
    v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), v_zero_byte_payload))
    p_publisher.done;

    timer t_timeout := 0.5;
    t_timeout.start
    alt {
      [] t_timeout.timeout {
        // wait until publish is sent out from queue!
        // otherwise the following subscription arrives before the previous publish (?)
        // TODO: check if [TESTPORT_PARAMETERS] *.p.noDelay:="YES" solves the problem!
        break;
      }
    }

    // subscribe to topic and check if retained message was removed
    p_subscriber.start(f_mqtt_subscribe_no_retained(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    // Not required here because publisher already sends a retained message with zero-byte payload
    /* clean up the retained message as this might brake other tests! */
    //p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    //p_publisher.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_006(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    /* Expected behaviour */
    // send a retained message with payload
    var BIT1n v_retain_flag := '1'B
    var octetstring v_payload_1 := 'A5A5A5A5A5A5'O
    var QoS v_qos_level := AT_MOST_ONCE_DELIVERY
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), v_payload_1))
    p_publisher.done;

    // now send a non-retained message with alternative payload
    v_retain_flag := '0'B
    var octetstring v_payload_2 := 'FFEEDDCCBBAA'O
    v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), v_payload_2))
    p_publisher.done;

    timer t_timeout := 0.5;
    t_timeout.start
    alt {
      [] t_timeout.timeout {
        // wait until publish is sent out from queue!
        // otherwise the following subscription arrives before the previous publish (?)
        // TODO: check if [TESTPORT_PARAMETERS] *.p.noDelay:="YES" solves the problem!
        break;
      }
    }

    // receive the published message with retained flag and first payload
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_alternative_payload_qos0('1'B, v_payload_1)
    p_subscriber.start(f_mqtt_subscribe_retained(v_qos_level, v_expected))
    p_subscriber.done

    /* clean up the retained message as this might brake other tests! */
    p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    p_publisher.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_RTND_007(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    /* Expected behaviour */
    // send a retained message with payload
    var BIT1n v_retain_flag := '1'B
    var octetstring v_payload_1 := 'A5A5A5A5A5A5'O
    var QoS v_qos_level := AT_LEAST_ONCE_DELIVERY
    var MQTT_v3_1_1_PublishHeader v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), v_payload_1))
    p_publisher.done;

    // now send a retained message with alternative payload and QoS = 0
    v_retain_flag := '1'B
    var octetstring v_payload_2 := 'FFEEDDCCBBAA'O
    v_qos_level := AT_MOST_ONCE_DELIVERY
    v_pub_header := valueof(t_publish_header(-, v_qos_level, v_retain_flag))
    p_publisher.start(f_mqtt_send_publish_header(valueof(v_pub_header), v_payload_2))
    p_publisher.done;

    // receive the published message with retained flag and second payload
    var boolean v_fail_on_timeout := false  // IUT SHOULD retain PUBLISH(v_payload_2) but also MAY choose to discard
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_alternative_payload_qos0('1'B, v_payload_2)
    p_subscriber.start(f_mqtt_subscribe_retained(v_qos_level, v_expected, v_fail_on_timeout))
    p_subscriber.done

    /* clean up the retained message as this might brake other tests! */
    p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    p_publisher.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_LWT_001(MQTT_Client_MTC p_client_lwt, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_client_lwt.start(f_mqtt_connect_03())  // with LWT
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    /* expected bahaviour */
    var octetstring v_will_message := unichar2oct(PX_WILL_MESSAGE);
    var template MQTT_v3_1_1_Publish v_lwt_message := mw_publish_packet_payload_qos0(v_will_message)
    p_subscriber.start(f_mqtt_receive_publish(v_lwt_message))
    p_client_lwt.start(f_ipl4_disconnect())
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_LWT_002(MQTT_Client_MTC p_client_lwt, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_client_lwt.start(f_mqtt_connect_03())  // with LWT
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    /* expected bahaviour */
    p_subscriber.start(f_mqtt_receive_no_publish())
    p_client_lwt.start(f_send_disconnect())
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_LWT_003(MQTT_Client_MTC p_client_lwt, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_client_lwt.start(f_mqtt_connect_valid())  // without LWT
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    /* expected bahaviour */
    p_subscriber.start(f_mqtt_receive_no_publish())
    p_client_lwt.start(f_ipl4_disconnect())
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_LWT_004(MQTT_Client_MTC p_client_lwt, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_client_lwt.start(f_mqtt_connect_03('1'B))  // with LWT and will_retain
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_client_lwt.start(f_ipl4_disconnect())
    p_client_lwt.done;

    /* expected bahaviour */
    var template MQTT_v3_1_1_Publish v_expected := mw_publish_packet_retain_qos0
    p_subscriber.start(f_mqtt_subscribe_retained(AT_MOST_ONCE_DELIVERY, v_expected))
    all component.done;

    /* clean up the retained LWT message as this might brake other tests! */
    // because publisher is already disconnected, the subscriber will do!
    p_subscriber.start(f_mqtt_send_publish_header(valueof(t_publish_header(-, AT_MOST_ONCE_DELIVERY, '1'B)), ''O))  // retained message with empty payload
    p_subscriber.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_LWT_005(MQTT_Client_MTC p_client_lwt, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_client_lwt.start(f_mqtt_connect_03('0'B))  // with LWT and will_retain
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_client_lwt.start(f_ipl4_disconnect())
    p_client_lwt.done;

    /* expected bahaviour */
    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    p_subscriber.start(f_mqtt_receive_no_publish())
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_001(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    /* expected bahaviour */
    p_publisher.start(f_send_publish_zwnbs_01())
    p_subscriber.start(f_mqtt_receive_no_publish())
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_002(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_send_subscribe_zwnbs_01(AT_MOST_ONCE_DELIVERY))
    p_subscriber.done;

    /* expected bahaviour */
    p_publisher.start(f_mqtt_send_publish_header(valueof(t_publish_header), 'A5A5A5A5A5A5'O))
    p_subscriber.start(f_mqtt_receive_no_publish())
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_003(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    // see non-normative comments in http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718108
    var universal charstring v_topic_filter := "#"
    p_subscriber.start(f_mqtt_subscribe_topic(AT_MOST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_sys := f_utf8_from_charstring("$")
    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_MOST_ONCE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_sys, v_payload)

    p_subscriber.start(f_mqtt_receive_no_publish())
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_004(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    // see non-normative comments in http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718108
    var universal charstring v_topic_filter := "+/monitor/Clients"
    p_subscriber.start(f_mqtt_subscribe_topic(AT_MOST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_sys := f_utf8_from_charstring("$SYS/monitor/Clients")
    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_MOST_ONCE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_sys, v_payload)

    p_subscriber.start(f_mqtt_receive_no_publish())
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_005(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    const universal charstring c_base_topic_filter := "$SYS/eclipse/iot/"

    // see non-normative comments in http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718108
    var universal charstring v_topic_filter := "$SYS/#"                            // avoid getting a verdict from other internal messages
    var universal charstring v_topic_name_sys := c_base_topic_filter & "testware"  // avoid getting a verdict from other internal messages
    var template universal charstring v_topic_filter_sys := pattern "$SYS/?*"
    if(PX_ALLOWED_PUBLISH_SYS) { v_topic_filter := c_base_topic_filter & "#" }

    p_subscriber.start(f_mqtt_subscribe_topic(AT_MOST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    /* expected bahaviour */

    // by default we'll be waiting for a single incoming message on $SYS/#
    var template MQTT_v3_1_1_Publish v_receive_publish := mw_publish_packet_topic_qos0(v_topic_filter_sys)
    // if we are allowed to publish to $SYS, then we'll be waiting for a specific eclipse iot-testware message
    if(PX_ALLOWED_PUBLISH_SYS)
    {
      // instead of listening for "$SYS/?" listen for "$SYS/eclipse/iot/?"
      v_topic_filter_sys := pattern c_base_topic_filter & "?*"
      v_receive_publish := mw_publish_packet_topic_qos0(v_topic_filter_sys)

      var octetstring v_payload := 'A0A0'O;
      var integer v_packet_id := 1234
      var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_MOST_ONCE_DELIVERY, '0'B)
      var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, f_utf8_from_charstring(v_topic_name_sys), v_payload)

      p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    }

    p_subscriber.start(f_mqtt_receive_publish_02(v_receive_publish))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_006(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(AT_LEAST_ONCE_DELIVERY))
    p_subscriber.done

    var integer v_pid_1 := 1234
    var integer v_pid_2 := 5678
    var octetstring v_pl_1 := 'AAAA'O
    var octetstring v_pl_2 := 'BBBB'O

    // start listening for published messages
    p_subscriber.start(f_mqtt_receive_publish_ordered_retransmition(AT_LEAST_ONCE_DELIVERY, v_pl_1, v_pl_2))

    // send PACKET_ID_1
    p_publisher.start(f_mqtt_send_publish_packetid(AT_LEAST_ONCE_DELIVERY, v_pid_1, v_pl_1))
    p_publisher.done
    // send PACKET_ID_2
    p_publisher.start(f_mqtt_send_publish_packetid(AT_LEAST_ONCE_DELIVERY, v_pid_2, v_pl_2))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_PUBSUB_007(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    p_subscriber.start(f_mqtt_subscribe(EXACTLY_ONE_DELIVERY))
    p_subscriber.done

    var integer v_pid_1 := 1234
    var integer v_pid_2 := 5678
    var octetstring v_pl_1 := 'AAAA'O
    var octetstring v_pl_2 := 'BBBB'O

    // start listening for published messages
    p_subscriber.start(f_mqtt_receive_publish_ordered_retransmition(EXACTLY_ONE_DELIVERY, v_pl_1, v_pl_2))

    // send PACKET_ID_1
    p_publisher.start(f_mqtt_send_publish_packetid(EXACTLY_ONE_DELIVERY, v_pid_1, v_pl_1))
    p_publisher.done
    // send PACKET_ID_2
    p_publisher.start(f_mqtt_send_publish_packetid(EXACTLY_ONE_DELIVERY, v_pid_2, v_pl_2))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_QOS_001(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    var universal charstring v_topic_filter := PX_TOPIC_NAME
    p_subscriber.start(f_mqtt_subscribe_topic(AT_MOST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    var universal charstring v_topic_filter_overlap := v_topic_filter & "#"
    p_subscriber.start(f_mqtt_subscribe_topic(AT_LEAST_ONCE_DELIVERY, v_topic_filter_overlap))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_overlap := f_utf8_from_charstring(v_topic_filter & "test")

    var template MQTT_v3_1_1_Publish v_receive_publish := mdw_publish_packet_qos0(AT_MOST_ONCE_DELIVERY)
    // expected QoS is configurable in PIXITS
    if(PX_UPGRADE_QOS) { v_receive_publish := mw_publish_packet_qos(AT_LEAST_ONCE_DELIVERY) }

    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_MOST_ONCE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_overlap, v_payload)

    p_subscriber.start(f_mqtt_receive_publish(v_receive_publish))
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_QOS_002(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    var universal charstring v_topic_filter := PX_TOPIC_NAME
    p_subscriber.start(f_mqtt_subscribe_topic(AT_MOST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    var universal charstring v_topic_filter_overlap := v_topic_filter & "#"
    p_subscriber.start(f_mqtt_subscribe_topic(EXACTLY_ONE_DELIVERY, v_topic_filter_overlap))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_overlap := f_utf8_from_charstring(v_topic_filter & "test")

    var template MQTT_v3_1_1_Publish v_receive_publish := mdw_publish_packet_qos0(AT_MOST_ONCE_DELIVERY)
    // expected QoS is configurable in PIXITS
    if(PX_UPGRADE_QOS) { v_receive_publish := mw_publish_packet_qos(EXACTLY_ONE_DELIVERY) }

    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_MOST_ONCE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_overlap, v_payload)

    p_subscriber.start(f_mqtt_receive_publish(v_receive_publish))
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_QOS_003(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    var universal charstring v_topic_filter := PX_TOPIC_NAME
    p_subscriber.start(f_mqtt_subscribe_topic(AT_LEAST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    var universal charstring v_topic_filter_overlap := v_topic_filter & "#"
    p_subscriber.start(f_mqtt_subscribe_topic(EXACTLY_ONE_DELIVERY, v_topic_filter_overlap))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_overlap := f_utf8_from_charstring(v_topic_filter & "test")

    var template MQTT_v3_1_1_Publish v_receive_publish := mw_publish_packet_qos(AT_LEAST_ONCE_DELIVERY)
    // expected QoS is configurable in PIXITS
    if(PX_UPGRADE_QOS) { v_receive_publish := mw_publish_packet_qos(EXACTLY_ONE_DELIVERY) }

    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_LEAST_ONCE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_overlap, v_payload)

    p_subscriber.start(f_mqtt_receive_publish(v_receive_publish))
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_QOS_004(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    var universal charstring v_topic_filter := PX_TOPIC_NAME
    p_subscriber.start(f_mqtt_subscribe_topic(AT_LEAST_ONCE_DELIVERY, v_topic_filter))
    p_subscriber.done

    var universal charstring v_topic_filter_overlap := v_topic_filter & "#"
    p_subscriber.start(f_mqtt_subscribe_topic(AT_MOST_ONCE_DELIVERY, v_topic_filter_overlap))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_overlap := f_utf8_from_charstring(v_topic_filter & "test")

    var template MQTT_v3_1_1_Publish v_receive_publish := mdw_publish_packet_qos0(AT_MOST_ONCE_DELIVERY)

    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, AT_LEAST_ONCE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_overlap, v_payload)

    p_subscriber.start(f_mqtt_receive_publish(v_receive_publish))
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }

  function f_TC_MQTT_PERF_BROKER_FEAT_QOS_005(MQTT_Client_MTC p_publisher, MQTT_Client_MTC p_subscriber) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    /* Initial conditions */
    p_publisher.start(f_mqtt_connect_valid())
    p_subscriber.start(f_mqtt_connect_valid())
    all component.done;

    var universal charstring v_topic_filter := PX_TOPIC_NAME
    p_subscriber.start(f_mqtt_subscribe_topic(EXACTLY_ONE_DELIVERY, v_topic_filter))
    p_subscriber.done

    var universal charstring v_topic_filter_overlap := v_topic_filter & "#"
    p_subscriber.start(f_mqtt_subscribe_topic(AT_LEAST_ONCE_DELIVERY, v_topic_filter_overlap))
    p_subscriber.done

    /* expected bahaviour */
    var octetstring v_payload := 'A0A0'O;
    var integer v_packet_id := 1234
    var UTF8EncodedString v_topic_name_overlap := f_utf8_from_charstring(v_topic_filter & "test")

    var template MQTT_v3_1_1_Publish v_receive_publish := mw_publish_packet_qos(AT_LEAST_ONCE_DELIVERY)

    var template MQTT_v3_1_1_PublishHeader v_send_header := t_publish_header('0'B, EXACTLY_ONE_DELIVERY, '0'B)
    var template MQTT_v3_1_1_Publish v_send_publish := t_publish_packet(valueof(v_send_header), v_packet_id, v_topic_name_overlap, v_payload)

    p_subscriber.start(f_mqtt_receive_publish(v_receive_publish))
    p_publisher.start(f_mqtt_send_publish(valueof(v_send_publish)))
    all component.done;
  }
} // protocolFeaturesFunctionsGroup

  function f_TC_MQTT_PERF_BROKER_SEC_CVE_001(MQTT_Client_MTC p_attacker, MQTT_Client_MTC p_probe) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_attacker.start(f_mqtt_connect_valid())
    p_probe.start(f_mqtt_connect_valid())
    all component.done;

    p_probe.start(f_ipl4_probe(PX_PROBE_TIME))
    p_attacker.start(f_send_malformed_subscribe_01())
    all component.done
  }

  function f_TC_MQTT_PERF_BROKER_SEC_CVE_002(MQTT_Client_MTC p_attacker, MQTT_Client_MTC p_probe) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_attacker.start(f_mqtt_connect_valid())
    p_probe.start(f_mqtt_connect_valid())
    all component.done;

    p_probe.start(f_ipl4_probe(PX_PROBE_TIME))
    p_attacker.start(f_send_malformed_publish_01())
    all component.done
  }

  function f_TC_MQTT_PERF_BROKER_SEC_CVE_003(MQTT_Client_MTC p_attacker, MQTT_Client_MTC p_probe) runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    p_probe.start(f_mqtt_connect_valid())
    p_attacker.start(f_mqtt_connect_valid())
    all component.done;

    p_probe.start(f_ipl4_probe(PX_PROBE_TIME))
    p_attacker.start(f_send_subscribe_cve_2019_11779())
    all component.done

    all component.done
  }

  /*
  * Note: still experimental and does not work yet for affected IUT
  *
  function f_TC_MQTT_PERF_BROKER_SEC_CVE_xxx(MQTT_Client_List p_attacker_list, MQTT_Client_MTC p_probe) runs on MQTT_Client_MTC system MQTT_Client_SecurityTestSystem
  {
    p_probe.start(f_mqtt_connect_valid())
    all component.done;

    p_probe.start(f_ipl4_probe(PX_PROBE_TIME))

    var integer v_clients_len := lengthof(p_attacker_list)
    for(var integer i := 0; i < v_clients_len; i := i + 1)
    {
      var MQTT_Client_MTC v_cc := p_attacker_list[i]
      v_cc.start(f_malformed_connect_01(100, 65535))
    }

    all component.done
  }*/
} // MQTT_Testcase_Functions
